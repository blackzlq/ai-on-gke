# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: 'validate platform'
    name: 'gcr.io/$PROJECT_ID/terraform'
    script: |
      terraform init -no-color
      terraform validate -no-color
    dir: 'infrastructure/'
    waitFor: ['-']
  
  - id: 'validate rag'
    name: 'gcr.io/$PROJECT_ID/terraform'
    script: |
      terraform init -no-color
      terraform validate -no-color
    dir: 'applications/rag/'
    waitFor: ['validate platform']

  # Create cluster to test ray, jupyterhub
  - id: 'create gke cluster'
    name: 'gcr.io/$PROJECT_ID/terraform'
    env:
      - "KUBE_LOAD_CONFIG_FILE=false"
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e

        terraform apply \
        -var-file=tfvars_tests/standard-gke-public.platform.tfvars \
        -var=project_id=$PROJECT_ID \
        -var=network_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
        -var=subnetwork_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
        -var=subnetwork_region=$_REGION \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
        -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
        -var=cluster_location=$_REGION \
        -auto-approve -no-color -lock=false
        echo "pass" > /workspace/gke_cluster_result.txt
    dir: 'infrastructure/'
    allowFailure: true
    waitFor: ['validate rag']

  - id: 'test rag'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e

        # Get kube config
        gcloud container clusters get-credentials \
        ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
        --location $_REGION \
        --project $PROJECT_ID

        cd /workspace/modules/jupyter/tests
        python3 change_jupyter_config.py $_AUTOPILOT_CLUSTER

        cd /workspace/applications/rag/
        terraform apply \
        -var-file=workloads.tfvars \
        -var=network_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
        -var=create_cluster=false \
        -var=jupyter_add_auth=false \
        -var=frontend_add_auth=false \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
        -var=cluster_location=$_REGION \
        -var=kubernetes_namespace=rag-$SHORT_SHA-$_BUILD_ID \
        -var=gcs_bucket=gke-aieco-rag-$SHORT_SHA-$_BUILD_ID \
        -var=ray_service_account=ray-sa-$SHORT_SHA-$_BUILD_ID \
        -var=rag_service_account=rag-sa-$SHORT_SHA-$_BUILD_ID \
        -var=jupyter_service_account=jupyter-sa-$SHORT_SHA-$_BUILD_ID \
        -var=cloudsql_instance=pgvector-instance-$SHORT_SHA-$_BUILD_ID \
        -var=jupyter_add_auth=true \
        -var=jupyter_domain={IP_ADDRESS}.nip.io \
        -var=jupyter_members_allowlist=serviceAccount:790418208107@cloudbuild.gserviceaccount.com \
        -var=frontend_add_auth=true \
        -var=frontend_domain={IP_ADDRESS}.nip.io \
        -var=frontend_members_allowlist=serviceAccount:790418208107@cloudbuild.gserviceaccount.com \
        -var=ray_dashboard_add_auth=true \
        -var=ray_dashboard_domain={IP_ADDRESS}.nip.io \
        -var=ray_dashboard_members_allowlist=serviceAccount:790418208107@cloudbuild.gserviceaccount.com \
        -auto-approve -no-color -lock=false
        echo "pass" > /workspace/rag_tf_result.txt

        # Validate Ray: Make sure pods are running
        kubectl wait --all pods -n rag-$SHORT_SHA-$_BUILD_ID --for=condition=Ready --timeout=300s
          
        # Validate JupyterHub: Test Hub
        cd /workspace/modules/iap/tests
        pip3 install --upgrade google-api-python-client
        python3 iap_test.py $(terraform output frontend_uri) $(kubectl get secret frontend-iap-secret -n rag-$SHORT_SHA-$_BUILD_ID -o jsonpath="{.data.client_id}" | base64 --decode; echo) $(terraform output jupyterhub_uri) $(kubectl get secret jupyter-iap-secret -n rag-$SHORT_SHA-$_BUILD_ID -o jsonpath="{.data.client_id}" | base64 --decode; echo) $(terraform output ray_dashboard_uri) $(kubectl get secret ray-dashboard-secret -n rag-$SHORT_SHA-$_BUILD_ID -o jsonpath="{.data.client_id}" | base64 --decode; echo) $PROJECT_ID rag-$SHORT_SHA-$_BUILD_ID
        echo "pass" > /workspace/rag_jupyterhub_test_result.txt
    allowFailure: true
    waitFor: []

  - id: 'cleanup rag'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e

        cd /workspace/applications/rag/
        terraform destroy \
        -var-file=workloads.tfvars \
        -var=network_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
        -var=create_cluster=false \
        -var=jupyter_add_auth=false \
        -var=frontend_add_auth=false \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
        -var=cluster_location=$_REGION \
        -var=kubernetes_namespace=rag-$SHORT_SHA-$_BUILD_ID \
        -var=gcs_bucket=gke-aieco-rag-$SHORT_SHA-$_BUILD_ID \
        -var=ray_service_account=ray-sa-$SHORT_SHA-$_BUILD_ID \
        -var=rag_service_account=rag-sa-$SHORT_SHA-$_BUILD_ID \
        -var=jupyter_service_account=jupyter-sa-$SHORT_SHA-$_BUILD_ID \
        -var=cloudsql_instance=pgvector-instance-$SHORT_SHA-$_BUILD_ID \
        -var=jupyter_add_auth=true \
        -var=jupyter_domain={IP_ADDRESS}.nip.io \
        -var=jupyter_members_allowlist=serviceAccount:790418208107@cloudbuild.gserviceaccount.com \
        -var=frontend_add_auth=true \
        -var=frontend_domain={IP_ADDRESS}.nip.io \
        -var=frontend_members_allowlist=serviceAccount:790418208107@cloudbuild.gserviceaccount.com \
        -var=ray_dashboard_add_auth=true \
        -var=ray_dashboard_domain={IP_ADDRESS}.nip.io \
        -var=ray_dashboard_members_allowlist=serviceAccount:790418208107@cloudbuild.gserviceaccount.com \
        -auto-approve -no-color

    allowFailure: true
    waitFor: ['test rag']

  - id: 'cleanup gke cluster'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e

        cd /workspace/infrastructure
        terraform destroy -var-file=tfvars_tests/standard-gke-public.platform.tfvars -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
        -var=network_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
        -var=subnetwork_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
        -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
        -var=cluster_location=$_REGION -auto-approve -no-color

    allowFailure: true
    waitFor: ['cleanup rag']

  - id: 'check result'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ $(cat /workspace/gke_cluster_result.txt) != "pass" ]]; then
          echo "gke cluster creation failed"
          exit 1
        fi

        if [[ $(cat /workspace/rag_tf_result.txt) != "pass" ]]; then
          echo "rag tf failed"
          exit 1
        fi

    waitFor: ['cleanup gke cluster']
        
substitutions:
  _REGION: us-east4
  _USER_NAME: github
  _AUTOPILOT_CLUSTER: "false"
  _BUILD_ID: ${BUILD_ID:0:8}
options:
  substitutionOption: 'ALLOW_LOOSE'
  machineType: 'E2_HIGHCPU_8'
  logging: 'CLOUD_LOGGING_ONLY'
timeout: 6000s
